'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Errors = function () {
  /**
  * Constructor.
  *
  */
  function Errors() {
    _classCallCheck(this, Errors);

    this.errors = {};
  }

  /**
   * Determine if we have any errors.
   *
   * @returns {boolean}
   */


  _createClass(Errors, [{
    key: 'any',
    value: function any() {
      return Object.keys(this.errors).length > 0;
    }

    /**
     * Determine if we have any errors.
     *
     * @returns {boolean}
     */

  }, {
    key: 'hasErrors',
    value: function hasErrors() {
      return this.any();
    }

    /**
     * Get all of the raw errors for the collection.
     *
     * @returns {{}|*}
     */

  }, {
    key: 'all',
    value: function all() {
      return this.errors;
    }

    /**
     * Check if exists error for a current field.
     *
     * @param field
     * @returns {boolean}
     */

  }, {
    key: 'has',
    value: function has(field) {
      return this.errors.hasOwnProperty(field);
    }

    /**
     * Retrieve the error message for a field.
     *
     * @param field
     * @returns {*}
     */

  }, {
    key: 'get',
    value: function get(field) {
      if (this.has(field)) {
        if (typeof this.errors[field] === 'string') {
          return this.errors[field];
        }
        return this.errors[field][0];
      }
    }

    /**
     * Record the new errors.
     *
     * @param errors
     */

  }, {
    key: 'record',
    value: function record(errors) {
      this.set(errors);
    }

    /**
     * Set the raw errors for the collection.
     *
     * @param errors
     */

  }, {
    key: 'set',
    value: function set(errors) {
      this.errors = errors;
    }

    /**
     * Clear one or all error fields.
     *
     * @param field
     */

  }, {
    key: 'clear',
    value: function clear(field) {
      if (field) {
        delete this.errors[field];

        return;
      }

      this.errors = {};
    }

    /**
     * Clear all errors if no field parameter is provided
     * or clear only field if provided.
     *
     * @param field
     */

  }, {
    key: 'forget',
    value: function forget(field) {
      this.clear(field);
    }
  }]);

  return Errors;
}();

exports.default = Errors;