'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Errors = require('./Errors');

var _Errors2 = _interopRequireDefault(_Errors);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Form = function () {
  /**
   * Constructor.
   *
   * @param fields
   */
  function Form(fields) {
    _classCallCheck(this, Form);

    this.clearOnSubmit = false;

    this.originalFields = fields;

    this.errors = new _Errors2.default();

    this.resetStatus();

    for (var field in fields) {
      this[field] = fields[field];
    }
  }

  /**
   * Retrieve the field form.
   *
   * @param field
   * @returns {*}
   */


  _createClass(Form, [{
    key: 'get',
    value: function get(field) {
      if (this.has(field)) {
        return this[field];
      }
    }

    /**
     * Set the field value.
     *
     * @param field
     * @param value
     */

  }, {
    key: 'set',
    value: function set(field, value) {
      if (this.has(field)) {
        this[field] = value;
      }
    }

    /**
     * Check if a field exists on form
     *
     * @param field
     * @returns {boolean}
     */

  }, {
    key: 'has',
    value: function has(field) {
      return this.hasOwnProperty(field);
    }

    /**
     * Reset form.
     *
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.fields = {};

      for (var field in this.originalFields) {
        this[field] = '';
      }

      this.errors.clear();
    }

    /**
     * Activates form clearing/reset after submit.
     *
     */

  }, {
    key: 'clearOnSubmit',
    value: function clearOnSubmit() {
      this.clearOnSubmit = true;
    }

    /**
     * Reset status.
     *
     */

  }, {
    key: 'resetStatus',
    value: function resetStatus() {
      this.errors.forget();
      this.submitting = false;
      this.submitted = false;
      this.succeeded = false;
    }

    /**
     * Get form data.
     *
     * @returns {{}}
     */

  }, {
    key: 'data',
    value: function data() {
      var data = {};

      for (var field in this.originalFields) {
        data[field] = this[field];
      }

      return data;
    }

    /**
     * Start processing the form.
     *
     */

  }, {
    key: 'startProcessing',
    value: function startProcessing() {
      this.errors.forget();
      this.submitting = true;
      this.succeeded = false;
    }
  }, {
    key: 'finishProcessing',


    /**
     * Finish processing the form.
     *
     */
    value: function finishProcessing() {
      this.submitting = false;
      this.submitted = false;
      this.succeeded = true;
    }

    /**
     * Finish processing the form on errors.
     */

  }, {
    key: 'finishProcessingOnErrors',
    value: function finishProcessingOnErrors() {
      this.submitting = false;
      this.submitted = false;
      this.succeeded = false;
    }

    /**
     * Send a POST request to the given URL.
     *
     * @param url
     * @returns {*}
     */

  }, {
    key: 'post',
    value: function post(url) {
      return this.submit('post', url);
    }

    /**
     * Send a PUT request to the given URL.
     *
     * @param url
     * @returns {*}
     */

  }, {
    key: 'put',
    value: function put(url) {
      return this.submit('put', url);
    }

    /**
     * Send a PATCH request to the given URL.
     *
     * @param url
     * @returns {*}
     */

  }, {
    key: 'patch',
    value: function patch(url) {
      return this.submit('patch', url);
    }

    /**
     * Send a DELETE request to the given URL.
     *
     * @param url
     * @returns {*}
     */

  }, {
    key: 'delete',
    value: function _delete(url) {
      return this.submit('delete', url);
    }

    /**
     * Submit the form to the back-end api/server.
     *
     * @param requesType
     * @param url
     * @returns {Promise}
     */

  }, {
    key: 'submit',
    value: function submit(requesType, url) {
      var _this = this;

      this.startProcessing();
      return new Promise(function (resolve, reject) {
        _axios2.default[requesType](url, _this.data()).then(function (response) {
          _this.onSuccess();
          resolve(response);
        }).catch(function (error) {
          _this.onFail(error.response.data);
          reject(error);
        });
      });
    }

    /**
     * Process on success.
     */

  }, {
    key: 'onSuccess',
    value: function onSuccess() {
      this.finishProcessing();
      if (this.clearOnSubmit) this.reset();
    }

    /**
     * Process on fail.
     *
     * @param errors
     */

  }, {
    key: 'onFail',
    value: function onFail(errors) {
      this.errors.record(errors);
      this.finishProcessingOnErrors();
    }

    /**
     * Set the errors on the form.
     *
     * @param errors
     */

  }, {
    key: 'setErrors',
    value: function setErrors(errors) {
      this.submitting = false;
      this.errors.set(errors);
    }
  }]);

  return Form;
}();

exports.default = Form;